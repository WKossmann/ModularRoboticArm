#include <iostream>
#include <unistd.h>
#include <vector>
#include <cmath>
#include "classes/Vision.h"
#include "classes/ModularArm.h"
#include "classes/SOMBracoModular.h"

using namespace std;

#define qtdTestes 4

int main(){
    Vision vision;
    vision.start();

    ModularArm arm;
    arm.start();
    arm.sendMove(180,0);

    vector<vector<vector<double>>> matrixVector = {
 { {132, 73, 272, 249},  {131, 74, 275, 259},  {129, 74, 276, 269},  {126, 75, 278, 279},  {123, 76, 277, 290},  {120, 77, 277, 302},  {116, 77, 274, 317},  {112, 77, 269, 330},  {109, 77, 264, 343},  {105, 78, 260, 355},  {102, 78, 255, 366},  {100, 78, 249, 375},  {98, 78, 245, 382},  {96, 80, 246, 389},  {94, 82, 249, 393} },
 { {132, 75, 278, 251},  {131, 76, 280, 258},  {129, 76, 281, 268},  {126, 77, 282, 278},  {123, 78, 282, 289},  {120, 79, 282, 300},  {116, 79, 279, 315},  {113, 79, 274, 327},  {109, 79, 269, 340},  {106, 80, 266, 352},  {103, 80, 261, 364},  {100, 81, 256, 374},  {98, 81, 254, 381},  {96, 83, 254, 389},  {94, 85, 257, 394} },
 { {132, 78, 285, 249},  {131, 79, 287, 256},  {128, 80, 288, 265},  {126, 80, 288, 276},  {123, 81, 288, 287},  {120, 81, 288, 297},  {116, 82, 285, 312},  {114, 82, 282, 323},  {110, 82, 278, 335},  {106, 83, 275, 349},  {103, 84, 272, 360},  {100, 85, 268, 371},  {98, 86, 267, 379},  {96, 88, 266, 386},  {95, 90, 268, 391} },
 { {133, 82, 294, 243},  {131, 83, 295, 250},  {129, 83, 296, 260},  {126, 83, 295, 270},  {123, 84, 295, 281},  {120, 84, 295, 293},  {117, 85, 293, 308},  {114, 85, 290, 319},  {111, 86, 287, 331},  {107, 87, 284, 346},  {104, 88, 282, 357},  {101, 89, 280, 368},  {99, 91, 279, 376},  {96, 93, 280, 384},  {95, 95, 281, 389} },
 { {134, 85, 300, 235},  {132, 86, 302, 242},  {129, 86, 303, 253},  {127, 87, 302, 264},  {124, 87, 302, 276},  {121, 87, 302, 288},  {117, 88, 300, 303},  {114, 88, 298, 315},  {111, 89, 296, 326},  {107, 91, 294, 342},  {104, 92, 293, 354},  {101, 94, 292, 365},  {99, 96, 292, 374},  {96, 98, 293, 382},  {95, 100, 293, 387} },
 { {134, 90, 309, 226},  {132, 90, 310, 233},  {130, 90, 310, 244},  {127, 90, 310, 255},  {124, 90, 310, 268},  {122, 91, 309, 281},  {118, 91, 308, 296},  {115, 91, 306, 309},  {112, 93, 305, 321},  {107, 95, 304, 338},  {104, 96, 303, 350},  {101, 98, 302, 362},  {98, 100, 302, 372},  {96, 103, 303, 381},  {94, 105, 304, 386} },
 { {135, 94, 317, 215},  {133, 95, 319, 221},  {131, 95, 319, 233},  {128, 95, 319, 244},  {125, 95, 319, 258},  {122, 95, 318, 272},  {119, 95, 317, 288},  {116, 96, 316, 302},  {112, 97, 316, 315},  {108, 100, 316, 333},  {105, 101, 316, 345},  {101, 104, 316, 357},  {98, 107, 316, 368},  {96, 109, 318, 378},  {94, 111, 318, 384} },
 { {136, 97, 322, 204},  {134, 98, 324, 211},  {132, 99, 325, 222},  {129, 99, 326, 233},  {126, 99, 326, 247},  {123, 98, 325, 263},  {119, 99, 325, 280},  {116, 99, 324, 297},  {113, 101, 324, 310},  {108, 103, 324, 328},  {105, 105, 325, 340},  {102, 108, 325, 353},  {98, 111, 326, 364},  {95, 114, 328, 374},  {94, 116, 329, 381} },
 { {136, 101, 327, 196},  {134, 102, 330, 202},  {132, 103, 332, 211},  {130, 103, 333, 222},  {127, 103, 333, 236},  {124, 103, 333, 252},  {120, 103, 334, 271},  {116, 103, 333, 290},  {113, 104, 332, 304},  {108, 107, 332, 323},  {105, 109, 333, 335},  {102, 112, 333, 347},  {99, 114, 334, 359},  {96, 117, 336, 368},  {94, 119, 336, 375} },
 { {136, 106, 334, 186},  {134, 107, 336, 192},  {132, 108, 339, 200},  {130, 108, 341, 211},  {127, 108, 342, 224},  {124, 108, 342, 239},  {120, 109, 343, 260},  {116, 109, 343, 280},  {113, 110, 342, 294},  {108, 112, 342, 314},  {106, 113, 342, 326},  {102, 116, 343, 338},  {99, 119, 344, 350},  {96, 121, 345, 360},  {94, 123, 345, 368} },
 { {135, 111, 341, 177},  {134, 112, 343, 183},  {132, 112, 345, 191},  {130, 113, 347, 202},  {127, 112, 348, 214},  {124, 113, 349, 229},  {120, 113, 351, 250},  {116, 113, 351, 271},  {113, 114, 351, 285},  {109, 116, 350, 306},  {106, 117, 350, 319},  {103, 119, 351, 331},  {100, 122, 351, 342},  {97, 124, 352, 351},  {95, 125, 352, 359} },
 { {135, 116, 347, 168},  {133, 117, 349, 173},  {132, 117, 351, 181},  {130, 117, 354, 193},  {127, 117, 355, 206},  {124, 117, 356, 221},  {120, 118, 359, 241},  {116, 118, 359, 262},  {114, 118, 359, 277},  {109, 120, 358, 298},  {106, 121, 358, 311},  {104, 122, 357, 323},  {101, 124, 358, 333},  {99, 126, 358, 343},  {96, 128, 359, 351} },
 { {134, 122, 352, 158},  {133, 122, 354, 163},  {131, 122, 357, 173},  {129, 122, 359, 186},  {127, 122, 361, 200},  {124, 122, 363, 214},  {120, 122, 366, 233},  {116, 123, 367, 254},  {114, 123, 366, 269},  {109, 124, 366, 289},  {107, 124, 365, 302},  {104, 125, 364, 314},  {102, 127, 364, 324},  {100, 128, 364, 334},  {97, 130, 364, 342} },
 { {134, 126, 357, 148},  {132, 127, 359, 155},  {130, 127, 362, 167},  {128, 126, 365, 180},  {126, 126, 367, 194},  {123, 126, 369, 209},  {119, 127, 372, 228},  {116, 127, 373, 247},  {113, 127, 373, 261},  {110, 127, 372, 281},  {107, 127, 371, 294},  {105, 128, 370, 306},  {103, 129, 370, 316},  {101, 130, 369, 325},  {99, 131, 369, 333} },
 { {133, 130, 360, 141},  {132, 130, 363, 149},  {130, 129, 366, 162},  {128, 129, 369, 177},  {125, 128, 370, 191},  {123, 128, 372, 207},  {119, 128, 375, 227},  {116, 129, 377, 244},  {113, 129, 377, 257},  {110, 129, 376, 275},  {107, 130, 375, 288},  {105, 130, 374, 301},  {103, 131, 374, 310},  {101, 132, 373, 319},  {100, 132, 372, 325} }
}; 



    SOMModulaArm som(matrixVector,15,4,2,3);
    cv::Mat image;
    

    int alvo[qtdTestes][2] = {  {250,370},
                                {350,160},
                                {270,250},
                                {320,210} };
    int joint[2] = {1,2};
    double input[4];
    double output[4];
    int x[qtdTestes],y[qtdTestes];
    for(int i=0;i<qtdTestes;i++){
        input[2] = (double)alvo[i][0];
        input[3] = (double)alvo[i][1];
        std::cout << i+1 <<  ": Alvo (em pixels):  " << input[2] << " " << input[3] << std::endl;

        som.bestResponse(input, output);
        std::cout << i+1 <<  ": Angulos recuperados da SOM:   " << (int)output[0] << " " << (int)output[1] << std::endl;

        arm.sendMoveMulti(output, joint , 2);    
        vision.getVisualPosition(x[i],y[i]);
        std::cout << i+1 <<  ": Posição após movimento com os angulos acima: " << x[i] << " " << y[i] << std::endl;

        std::cout << i+1 <<  ": Erro relativo: X: " << abs(input[2] - x[i])/input[2]*100.0 << "% Y:  " << abs(input[3] - y[i])/input[3]*100.0 << "%" <<  std::endl << std::endl;
    }

    for(int i=0;i<5;i++){
        vision.inputVideo.grab();
        vision.inputVideo.retrieve(image);
    }
    for(int i=0;i<qtdTestes;i++){
        cv::circle(image, cv::Point(alvo[i][0], alvo[i][1]), 4, cv::Scalar(0,0,255),2); // <-- ALVO (Vermelho)
        cv::circle(image, cv::Point(x[i]      , y[i]      ), 4, cv::Scalar(255,0,0),2); // <-- TIRO (Azul)
    }
    cv::imshow("Windown", image);
    cv::waitKey(0);

    return 0;
}